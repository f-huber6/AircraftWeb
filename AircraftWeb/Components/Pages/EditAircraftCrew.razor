@page "/aircraft-crews/edit/{aircraftId:int}/{mercenaryId:int}"
@using Database.Entities
@using Repository.Interfaces
@inject IRepository<AircraftCrews> AircraftCrewRepository
@inject IRepository<Aircraft> AircraftRepository
@inject IRepository<Mercenary> MercenaryRepository
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Edit Aircraft Crew</PageTitle>

<h3>Edit Aircraft Crew</h3>

@if (_aircraftCrew is null)
{
    <div class="alert alert-danger">Aircraft Crew not found.</div>
}
else
{
    <form @onsubmit="SaveAircraftCrew">
        <div class="mb-3">
            <label class="form-label">Aircraft</label>
            <select class="form-select" @bind="_selectedAircraftId">
                @foreach (var aircraft in _aircrafts!)
                {
                    <option value="@aircraft.AircraftId">@aircraft.Name</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Mercenary</label>
            <select class="form-select" @bind="_selectedMercenaryId">
                @foreach (var mercenary in _mercenaries!)
                {
                    <option value="@mercenary.MercenaryId">@mercenary.Firstname @mercenary.Lastname</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Joined At</label>
            <input type="date" class="form-control" @bind="_selectedJoinedAt" />
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
    </form>
}

@code {
    [Parameter] public int AircraftId { get; set; }
    [Parameter] public int MercenaryId { get; set; }

    private AircraftCrews? _aircraftCrew;
    private List<Aircraft>? _aircrafts;
    private List<Mercenary>? _mercenaries;

    private int _selectedAircraftId;
    private int _selectedMercenaryId;
    private DateTime _selectedJoinedAt = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        _aircrafts = await AircraftRepository.ReadAllAsync();
        _mercenaries = await MercenaryRepository.ReadAllAsync();
        _aircraftCrew = (await AircraftCrewRepository.ReadAllAsync()).FirstOrDefault(c => c.AircraftId == AircraftId && c.MercenaryId == MercenaryId);

        if (_aircraftCrew is null)
        {
            return;
        }
        
        _selectedAircraftId = _aircraftCrew.AircraftId;
        _selectedMercenaryId = _aircraftCrew.MercenaryId;
        _selectedJoinedAt = _aircraftCrew.JoinedAt;
    }

    private async Task SaveAircraftCrew(EventArgs e)
    {
        if (_aircraftCrew is null)
        {
            Console.WriteLine("Save failed: aircraftCrew is null.");
            return;
        }

        Console.WriteLine($"Updating aircraft crew: {_aircraftCrew.AircraftId} - {_aircraftCrew.MercenaryId} - {_aircraftCrew.JoinedAt}");

        try
        {
            await AircraftCrewRepository.UpdateAsync(_aircraftCrew);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ignoring exception while updating aircraft crew: {ex.Message}");
        }

        Navigation.NavigateTo("/aircraft-crews");
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/aircraft-crews");
    }
}
